## Introdução
web2py``web2py``:cite é um framework web de código aberto para desenvolvimento ágil de segurança
aplicativos da Web orientados a banco de dados; está escrito em Python``python``:cite
e programável em Python.
O web2py é um framework completo,
o que significa que contém todos os componentes que você precisa
para criar aplicativos da Web totalmente funcionais.

O web2py foi projetado para orientar um desenvolvedor da Web a seguir boas práticas de engenharia de software, como o uso de
o padrão Model View Controller (MVC). web2py separa a representação de dados (o modelo)
da apresentação de dados (a visão) e também da lógica de aplicação e fluxo de trabalho (o controlador). web2py
fornece bibliotecas para ajudar o desenvolvedor a projetar, implementar e testar cada uma dessas três partes separadamente,
e os faz trabalhar juntos.

O web2py é construído para segurança. Isso significa que ele resolve automaticamente muitos dos problemas
Isso pode levar a vulnerabilidades de segurança, seguindo práticas bem estabelecidas. Para
exemplo, ele valida todas as entradas (para evitar injeções), escapa todas as saídas (para evitar scripts entre sites),
renomeia os arquivos enviados (para evitar ataques de passagem de diretórios).
O web2py cuida dos principais problemas de segurança, para que os desenvolvedores tenham menos chances de introduzir vulnerabilidades.

O web2py inclui uma DAL (Database Abstraction Layer - Camada de Abstração do Banco de Dados) que grava SQL `` sql-w``:cite dinamicamente para que você, o desenvolvedor, não precise fazê-lo. O DAL sabe como gerar SQL de forma transparente para
SQLite``sqlite``:cite, MySQL `` mysql``:cite, PostgreSQL `` postgres``:cite, MSSQL``ssql``:cite,
FireBird``firebird``:cite, Oracle``oracle``:cite, IBM DB2 `` db2``:cite, Informix``informix``:cite e Ingres``ingresdb``:cite.

O DAL também pode gerar chamadas de função para o Google Datastore
quando executado no Google App Engine (GAE) `` gae``:cite.
Experimentalmente suportamos mais bancos de dados e novos são constantemente adicionados.
Por favor, verifique no web2py site e lista de discussão para adaptadores mais recentes.
Quando uma ou mais tabelas de banco de dados são definidas, o web2py gera automaticamente um banco de dados totalmente funcional baseado na web
interface de administração para acessar o banco de dados e as tabelas.

O web2py difere de outras estruturas da Web, pois é a única estrutura a adotar totalmente a Web 2.0.
paradigma, onde a web é o computador. De fato, o web2py não requer instalação ou configuração; isto
é executado em qualquer arquitetura que possa executar Python (Windows, Windows CE, Mac OS X, iOS e Unix/Linux), e as fases de desenvolvimento, implantação e manutenção dos aplicativos podem ser feitas por meio de uma interface da Web local ou remota. O web2py é executado com CPython (a implementação de C) e PyPy (Python escrito em Python), no Python 2.7.

O web2py fornece um sistema de bilhetagem para eventos de erro. Se ocorrer um erro, um ticket é emitido para o usuário,
e o erro é registrado para o administrador.

O web2py é open source e liberado sob a licença LGPL versão 3.

Outra característica importante do web2py é que nós, seus desenvolvedores, nos comprometemos a manter compatibilidade retroativa em versões futuras. Fazemos isso desde o primeiro lançamento do web2py em outubro de 2007.
Novos recursos foram adicionados e bugs foram corrigidos, mas se um programa trabalhou com o web2py 1.0, esse programa funcionará ainda melhor hoje.

Aqui estão alguns exemplos de declarações web2py que ilustram seu poder e simplicidade. O seguinte código:
``
db.define_table('person', Field('name'), Field('image', 'upload'))
``:code

cria uma tabela de banco de dados chamada "person" com dois campos: "name", uma string; e "imagem", algo que
precisa ser carregado (a imagem real). Se a tabela já existir, mas não corresponder a essa definição, ela será alterada adequadamente.

Dada a tabela definida acima, o seguinte código:
``
form = SQLFORM(db.person).process()
``:code

cria um formulário de inserção para esta tabela que permite aos usuários fazer upload de imagens. Isso também
valida o formulário enviado, renomeia a imagem enviada de forma segura, armazena a imagem em um arquivo,
insere o registro correspondente no banco de dados, impede a dupla apresentação e, eventualmente, modifica
o próprio formulário adicionando mensagens de erro se os dados enviados pelo usuário não passarem na validação.

Este código incorpora um wiki totalmente funcional com tags, pesquisa, nuvem de tags, permissões, anexos de mídia e suporte à oembed:

``
def index(): return auth.wiki()
``
O seguinte código em vez disso:
``
@auth.requires_permission('read', 'person')
def f(): ....
``:code

impede que os visitantes acessem a função `` f`` a menos que o visitante seja um membro de um grupo cujos membros tenham permissões para "ler" registros da tabela "pessoa". Se o visitante não estiver logado, o visitante será direcionado para uma página de login (fornecida por padrão pelo web2py).

O web2py também suporta componentes, ou seja, ações que podem ser carregadas em uma visualização e interagir com o visitante via Ajax sem recarregar a página inteira. Isto é feito através de um auxiliar `` LOAD`` que permite um design muito modular das aplicações; é discutido no capítulo 3 no contexto do wiki e, com algum detalhe, no último capítulo deste livro.

Esta 6ª edição do livro descreve o `` web2py`` 2.4.1 e versões posteriores.

### Princípios

A programação em Python geralmente segue esses princípios básicos:
- Não se repita (DRY).
- Deve haver apenas uma maneira de fazer as coisas.
- Explícito é melhor que implícito.

O web2py abraça totalmente os dois primeiros princípios, forçando o desenvolvedor a usar o software de som
práticas de engenharia que desencorajam a repetição de código. O web2py guia o desenvolvedor por quase
todas as tarefas comuns no desenvolvimento de aplicativos da Web (criação e processamento de formulários, gerenciamento
sessões, cookies, erros, etc.).

``request``:inxx
web2py difere de outros frameworks em relação ao terceiro princípio, que às vezes conflitua
com os outros dois. Em particular, o web2py não importa aplicativos do usuário, mas os executa em um contexto pré-definido. Esse contexto expõe as palavras-chave do Python, bem como as palavras-chave web2py.

Para alguns, isso pode parecer mágico, mas não deveria.
Simplesmente, na prática, alguns módulos já são importados sem que você faça isso.
web2py está tentando evitar a característica irritante de
outras estruturas que forçam o desenvolvedor a importar os mesmos módulos no topo de cada modelo e
controlador.

O web2py, importando seus próprios módulos, economiza tempo e evita erros, seguindo o espírito de "não se repita"
e "deve haver apenas uma maneira de fazer as coisas".

Se o desenvolvedor deseja usar outros módulos Python ou módulos de terceiros, esses
módulos devem ser importados explicitamente, como em qualquer outro programa Python.

### Web frameworks
``PHP``:inxx ``ASP``:inxx ``JSP``:inxx

Em seu nível mais fundamental, um aplicativo da Web consiste em um conjunto de programas (ou funções)
executado quando a URL correspondente é visitada.
A saída do programa é retornada ao visitante e renderizada pelo navegador.

O objetivo dos frameworks web é permitir que os desenvolvedores criem novos aplicativos de maneira rápida, fácil e sem erros.
Isso é feito fornecendo APIs e ferramentas que reduzem e simplificam a quantidade de codificação necessária.

As duas abordagens clássicas para o desenvolvimento de aplicativos da Web são:
- Gerando HTML``html-w``:cite `` html-o``: citar programaticamente.
- Incorporação de código em páginas HTML.

O primeiro modelo é o que foi seguido, por exemplo, pelos primeiros scripts CGI.
O segundo modelo é seguido, por exemplo, por PHP``php``:cite
(onde o código está em PHP, uma linguagem semelhante a C), ASP (onde o código está no Visual Basic) e JSP (onde o código está em Java).

Aqui está um exemplo de um programa PHP que, quando executado, recupera dados de um banco de dados e
retorna uma página HTML mostrando os registros selecionados:
``
<html><body><h1>Records</h1><?
  mysql_connect(localhost,username,password);
  @mysql_select_db(database) or die( "Unable to select database");
  $query="SELECT * FROM contacts";
  $result=mysql_query($query);
  mysql_close();
  $i=0;
  while ($i < mysql_numrows($result)) {
    $name=mysql_result($result,$i,"name");
    $phone=mysql_result($result,$i,"phone");
    echo "<b>$name</b><br>Phone:$phone<br /><br /><hr /><br />";
    $i++;
  }
?></body></html>
``:code
O problema com essa abordagem é que o código é incorporado ao HTML, mas o mesmo código também precisa
gerar HTML adicional e gerar instruções SQL
para consultar o banco de dados, entrelaçando várias camadas de
a aplicação e dificultando a leitura e a manutenção. A situação é
pior ainda para os aplicativos Ajax, e a complexidade aumenta com o número de páginas (arquivos) que compõem
a aplicação.

A funcionalidade do exemplo acima pode ser expressa em web2py com duas linhas de código Python:
``
def index():
    return HTML(BODY(H1('Records'), db().select(db.contacts.ALL)))
``:code
Neste exemplo simples, a estrutura da página HTML é representada programaticamente pelos objetos `` HTML``, `` BODY`` e `` H1``; o banco de dados `` db`` é consultado pelo comando `` select``; finalmente tudo
é serializado em HTML.
Observe que `` db`` não é uma palavra-chave, mas uma variável definida pelo usuário. Usaremos esse nome consistentemente para nos referirmos a uma conexão de banco de dados para evitar confusão.

Estruturas da Web são tipicamente categorizadas como um dos dois tipos: Uma estrutura "colada" é
construído pela montagem (colagem) de vários componentes de terceiros. Um framework "full-stack" é construído
criando componentes projetados especificamente para serem integrados e trabalhar juntos.

O web2py é um framework completo. Quase todos os seus componentes são construídos do zero e são projetados para funcionar
juntos, mas funcionam tão bem fora do framework web2py completo. Por exemplo, o
A Camada de Abstração de Banco de Dados (DAL) ou a linguagem de modelo pode ser usada independentemente
framework web2py importando `` gluon.dal`` ou `` gluon.template`` para seus próprios aplicativos Python. `` gluon`` é o nome do módulo web2py que contém as bibliotecas do sistema. Algumas bibliotecas web2py,
como construir e processar formulários de tabelas de banco de dados, ter dependências de outras partes
de web2py. O web2py também pode trabalhar com bibliotecas Python de terceiros, incluindo outras linguagens de modelo
e DALs, mas eles não serão tão integrados como os componentes originais.

### Model-View-Controller
``Model-View-Controller``:inxx
O web2py incentiva o desenvolvedor a separar a representação de dados (o modelo), os dados
apresentação (a visão) e o fluxo de trabalho da aplicação (o controlador). Vamos considerar novamente o exemplo anterior
e veja como construir um aplicativo web2py em torno dele. Aqui está um exemplo da interface de edição do web2py MVC:

[[image @///image/en0.png center 480px]]

O fluxo de trabalho típico de uma solicitação no web2py é descrito no diagrama a seguir:

[[image @///image/en100.png center 480px]]
No diagrama:
- O servidor pode ser o servidor Web interno da Web2py ou um servidor de terceiros, como o Apache. O servidor lida com multi-threading.
- "main" é o principal aplicativo WSGI. Ele executa todas as tarefas comuns e envolve os aplicativos do usuário. Ele lida com cookies, sessões, transações, roteamento de URL e roteamento reverso e despacho.
Ele pode servir e transmitir arquivos estáticos se o servidor da Web ainda não estiver fazendo isso.
- Os componentes Modelos, Visualizações e Controlador formam o aplicativo do usuário.
- Vários aplicativos podem ser hospedados na mesma instância web2py.
- As setas tracejadas representam a comunicação com o (s) mecanismo (s) de banco de dados. As consultas do banco de dados podem ser gravadas em SQL bruto (desencorajadas) ou usando a camada de abstração do banco de dados web2py (recomendado), para que o código do aplicativo web2py não dependa do mecanismo de banco de dados específico.
- O despachante mapeia o URL solicitado para uma chamada de função no controlador. A saída da função pode ser uma string ou um dicionário de símbolos (uma tabela de hash). Os dados no dicionário são renderizados por uma visualização. Se o visitante solicitar uma página HTML (o padrão), o dicionário será renderizado em uma página HTML. Se o visitante solicitar a mesma página em XML, o web2py tentará encontrar uma visualização que possa renderizar o dicionário em XML. O desenvolvedor pode criar exibições para renderizar páginas em qualquer um dos protocolos já suportados (HTML, XML, JSON, RSS, CSV e RTF) ou em protocolos personalizados adicionais.
- Todas as chamadas são agrupadas em uma transação e qualquer exceção não detectada faz com que a transação seja revertida. Se a solicitação for bem-sucedida, a transação será confirmada.
- O web2py também lida com sessões e cookies de sessão automaticamente, e quando uma transação é confirmada, a sessão também é armazenada, a menos que seja especificado de outra forma.
- É possível registrar tarefas recorrentes (via cron) para rodar em horários programados e/ou após a conclusão de determinadas ações. Dessa forma, é possível executar tarefas longas e com uso intensivo de computação em segundo plano sem diminuir a velocidade de navegação.

Aqui está uma aplicação MVC mínima e completa, composta por três arquivos:

**"db.py" é o model (modelo):**
Um aplicativo web2py muito simples definiria uma conexão com o banco de dados da seguinte forma:
``
db = DAL('sqlite://storage.sqlite')
db.define_table('contact',
   Field('name'),
   Field('phone'))
``:code

Ele se conecta ao banco de dados (neste exemplo, um banco de dados SQLite armazenado no arquivo `` storage.sqlite``) e
define uma tabela chamada `` contact``. Se a tabela não existir, o web2py cria e, de forma transparente
e no fundo,
gera código SQL no dialeto SQL apropriado para o mecanismo de banco de dados específico usado.
O desenvolvedor pode
ver o SQL gerado, mas não precisa alterar o código se o back-end do banco de dados, cujo padrão é
O SQLite é substituído pelo MySQL, PostgreSQL, MSSQL, FireBird, Oracle, DB2, Informix, Interbase, Ingres e Google App Engine (SQL e NoSQL).

Observe que as versões modernas do web2py deixam a conexão de banco de dados específica para um arquivo de texto de configuração armazenado no diretório particular do aplicativo. Isso facilita a implementação do aplicativo de um ambiente de desenvolvimento em um servidor de produção, porque quase certamente existe uma conexão de banco de dados diferente. Então, ao invés de
``
db = DAL('sqlite://storage.sqlite')

``:code

Você verá o código como este:
``
## app configuration made easy. Look inside private/appconfig.ini
from gluon.contrib.appconfig import AppConfig
## once in production, remove reload=True to gain full speed
myconf = AppConfig(reload=True)
...
db = DAL(myconf.take('db.uri'), pool_size=myconf.take('db.pool_size', cast=int), check_reserved=['all'])
``:code

Se você olhar o arquivo de texto de configuração `` private/appconfig.ini``, verá que ele ainda é padronizado para sqlite.

Depois que uma tabela é definida e criada, o web2py também gera um banco de dados totalmente funcional baseado na web
interface de administração, chamada **appadmin**, para acessar o banco de dados e as tabelas.

**"default.py" é o  controller (controlador):**

``
def contacts():
    grid=SQLFORM.grid(db.contact, user_signature=False)
    return locals()
``:code

No web2py, as URLs são mapeadas para módulos do Python e chamadas de função. Neste caso, o controlador contém
uma única função (ou "ação") chamada `` contatos``. Uma ação pode
retornar uma string (a página da web retornada) ou um dicionário Python (um conjunto de
`` chave: valor`` pares) ou o conjunto de variáveis locais (como neste exemplo).
Se a função retornar um dicionário, ela será passada para uma exibição com o mesmo
nome como o controlador/função, que por sua vez processa a página.
Neste exemplo, a função `` contacts`` gera uma grade select/search/create/update/delete (selecionar/buscar/criar/atualizar/excluir) para a tabela `` db.contact``
e retorna a grade para a exibição.

**"default/contacts.html" é a view (visão):**

``
{{extend 'layout.html'}}
<h1>Manage My Contacts</h1>
{{=grid}}
``:code

Esta visão é chamada automaticamente pelo web2py depois que a função do controlador associado (ação) é executada.
O propósito desta visão é renderizar as variáveis no dicionário retornado (no nosso caso `` grid``) em HTML.
O arquivo de visão é escrito em HTML, mas ele incorpora o código Python delimitado pelos delimitadores especiais ``{{`` e ``}}``. Isso é bem diferente do exemplo de código PHP, porque o único código
incorporado no HTML é o código "camada de apresentação". O arquivo "layout.html" referenciado na parte superior da
view é fornecida pelo web2py e constitui o layout básico para todos os aplicativos web2py. O arquivo de layout pode
facilmente ser modificado ou substituído.
### Por que o web2py

O web2py é uma das muitas estruturas de aplicativos da web, mas possui recursos atraentes e exclusivos.
O web2py foi originalmente desenvolvido como uma ferramenta de ensino, com as seguintes motivações principais:
- Fácil para os usuários aprenderem o desenvolvimento web do lado do servidor sem comprometer a funcionalidade. Por essa razão, o web2py não requer instalação e configuração, não tem dependências (exceto a distribuição do código-fonte, que requer o Python 2.7 e seus módulos de biblioteca padrão) e expõe a maior parte de sua funcionalidade através de uma interface da Web, incluindo um Ambiente de Desenvolvimento Integrado. com Debugger e interface de banco de dados.
- O web2py permaneceu estável desde o primeiro dia porque segue um design de cima para baixo; ou seja, sua API foi projetada antes de ser implementada. Mesmo que novas funcionalidades tenham sido adicionadas, o web2py nunca quebrou a compatibilidade com versões anteriores, e não quebrará a compatibilidade quando funcionalidades adicionais forem adicionadas no futuro.
- O web2py aborda de forma proativa as questões de segurança mais importantes que afetam muitos aplicativos da web modernos, conforme determinado pelo OWASP``ow``:cite abaixo.
- web2py é leve. Suas principais bibliotecas, incluindo a Camada de Abstração do Banco de Dados, a linguagem de modelos e todos os ajudantes, totalizam 1,4 MB. Todo o código-fonte, incluindo aplicativos de amostra e imagens, é de 10,4 MB.
- O web2py tem um small footprint (usa pouca memória para ser executado)  e é muito rápido. Ele usa o servidor web Rocket ``rocket``:cite  WSGI desenvolvido por Timothy Farrell. É tão rápido quanto o Apache com mod_wsgi e suporta SSL e IPv6.
- O web2py usa a sintaxe do Python para modelos, controladores e visualizações, mas não importa modelos e controladores (como fazem todos os outros frameworks do Python) - em vez disso, os executa. Isso significa que os aplicativos podem ser instalados, desinstalados e modificados sem precisar reiniciar o servidor da Web (mesmo em produção), e diferentes aplicativos podem coexistir sem que seus módulos interfiram uns com os outros.
- O web2py usa uma Camada de Abstração do Banco de Dados (DAL) em vez de um Mapeador Relacional de Objeto (Object Relational Mapper - ORM). De um ponto de vista conceitual, isso significa que diferentes tabelas de banco de dados são mapeadas em diferentes instâncias de uma classe `` Table`` e não em classes diferentes, enquanto os registros são mapeados em instâncias de uma classe `` Row``, não em instâncias da classe de tabela correspondente. De um ponto de vista prático, isso significa que a sintaxe SQL mapeia quase um para um na sintaxe DAL, e não há programação de metaclasses complexa acontecendo como nos ORMs populares, o que aumentaria a latência.

WSGI `` wsgi-w``:cite ``wsgi-o``:cite (Interface de Gateway de Servidor da Web) é um padrão Python emergente para comunicação entre um servidor web e aplicativos Python.

Aqui está uma captura de tela da interface principal do web2py **admin**:

[[image @///image/en200.png center 480px]]


### Segurança
``security``:inxx
O Open Web Application Security Project``ow``: cite (OWASP) é uma comunidade mundial livre e aberta
na melhoria da segurança de softwares.

O OWASP listou os dez principais problemas de segurança que colocam os aplicativos da web em risco.
Essa lista é reproduzida aqui, juntamente com uma descrição de como cada problema é abordado pelo web2py:
- ``cross site scripting``:inxx "Cross Site Scripting (XSS): falhas de XSS ocorrem sempre que um aplicativo recebe dados fornecidos pelo usuário e os envia a um navegador sem primeiro validar ou codificar esse conteúdo. XSS permite que atacantes executem scripts em o navegador da vítima, que pode seqüestrar sessões de usuários, desfigurar sites, possivelmente introduzir worms etc. " ''web2py, por padrão, escapa de todas as variáveis ​​renderizadas na visualização, evitando XSS''.
- ``falhas de injeção``:inxx "Falhas de injeção: falhas de injeção, particularmente injeção de SQL, são comuns em aplicações web. A injeção ocorre quando dados fornecidos pelo usuário são enviados para um intérprete como parte de um comando ou consulta. engana o intérprete para executar comandos não intencionais ou alterar dados. " '' O web2py inclui uma camada de abstração de banco de dados que torna a injeção de SQL impossível. Normalmente, as instruções SQL não são escritas pelo desenvolvedor. Em vez disso, o SQL é gerado dinamicamente pelo DAL, garantindo que todos os dados inseridos sejam escapados adequadamente. ''
- ``malicious file execution``:inxx "Execução de arquivos maliciosos: O código vulnerável à inclusão remota de arquivos (RFI) permite que invasores incluam códigos e dados hostis, resultando em ataques devastadores, como comprometimento total do servidor." '' web2py permite que apenas funções expostas sejam executadas, impedindo a execução de arquivos maliciosos. Funções importadas nunca são expostas; apenas ações são expostas. O web2py usa uma interface de administração baseada na Web que torna muito fácil acompanhar o que está exposto e o que não está.''
- ``insecure object reference``:inxx "Referência direta a objetos inseguros: Uma referência direta a objetos ocorre quando um desenvolvedor expõe uma referência a um objeto interno de implementação, como um arquivo, diretório, registro de banco de dados ou chave, como URL ou Os atacantes podem manipular essas referências para acessar outros objetos sem autorização. " '' web2py não expõe nenhum objeto interno; Além disso, o web2py valida todas as URLs, impedindo ataques de passagem de diretórios. O web2py também fornece um mecanismo simples para criar formulários que validam automaticamente todos os valores de entrada. ''
- ``CSRF``:inxx "Cross Site Request Forgery (CSRF): Um ataque CSRF obriga o navegador de uma vítima conectada a enviar uma solicitação pré-autenticada a um aplicativo web vulnerável, que então força o navegador da vítima a executar um hostil ação em benefício do invasor. O CSRF pode ser tão poderoso quanto o aplicativo da Web que ele ataca. " '' O web2py previne o CSRF, bem como a dupla apresentação acidental de formulários, atribuindo um token aleatório único a cada formulário. Além disso, o web2py usa o UUID para o cookie de sessão. ''
- ``information leakage``:inxx`` manuseio incorreto de erros``:inxx "Vazamento de informações e manuseio incorreto de erros: Os aplicativos podem vazar acidentalmente informações sobre sua configuração, funcionamento interno ou violar a privacidade por meio de vários problemas de aplicativo. essa fraqueza para roubar dados confidenciais ou realizar ataques mais sérios ". '' O web2py inclui um sistema de bilhetagem. Nenhum erro pode resultar no código sendo exposto aos usuários. Todos os erros são registrados e um ticket é emitido para o usuário que permite o rastreamento de erros. Mas erros e código-fonte são acessíveis apenas ao administrador. ''
- "Autenticação quebrada e gerenciamento de sessão: as credenciais de conta e os tokens de sessão geralmente não são adequadamente protegidos. Os invasores comprometem senhas, chaves ou tokens de autenticação para assumir as identidades de outros usuários." ''O web2py fornece um mecanismo interno para autenticação do administrador e gerencia as sessões de forma independente para cada aplicativo. A interface administrativa também força o uso de cookies de sessão segura quando o cliente não é "localhost". Para aplicativos, ele inclui uma poderosa API de controle de acesso baseado em função.''
- ``cryptographic store``:inxx "Armazenamento Criptográfico Inseguro: aplicativos da Web raramente usam funções criptográficas adequadamente para proteger dados e credenciais. Os atacantes usam dados fracamente protegidos para conduzir roubo de identidade e outros crimes, como fraude de cartão de crédito." ''O web2py usa os algoritmos de hash MD5 ou HMAC + SHA-512 para proteger senhas armazenadas. Outros algoritmos também estão disponíveis.''
- ``comunicações seguras``:inxx "Comunicações inseguras: os aplicativos freqüentemente não criptografam o tráfego da rede quando é necessário proteger as comunicações sensíveis." '' O web2py inclui o servidor SSL-enabled``ssl``: cite Rocket WSGI, mas também pode usar Apache ou Lighttpd e mod_ssl para fornecer criptografia SSL de comunicações. ''
- ``access restriction``:inxx "Falha ao restringir o acesso à URL: Frequentemente, um aplicativo protege apenas a funcionalidade confidencial, impedindo a exibição de links ou URLs para usuários não autorizados. Os invasores podem usar essa fraqueza para acessar e realizar operações não autorizadas acessando esses URLs diretamente." '' O web2py mapeia solicitações de URLs para módulos e funções do Python. O web2py fornece um mecanismo para declarar quais funções são públicas e quais requerem autenticação e autorização. A API de controle de acesso baseada em função incluída permite que os desenvolvedores restrinjam o acesso a qualquer função com base em permissões de login, grupo ou grupo. As permissões são muito granulares e podem ser combinadas com filtros de banco de dados para permitir, por exemplo, dar acesso a tabelas e/ou registros específicos. O web2py também permite URLs assinadas digitalmente e fornece API para assinar digitalmente as chamadas de retorno do Ajax. ''

O web2py foi revisado para segurança e você pode encontrar o resultado da revisão em ref ``pythonsecurity``:cite.
### Na caixa

Você pode baixar o web2py no site oficial:

``
http://www.web2py.com
``:code
O web2py é composto pelos seguintes componentes:
- **bibliotecas**: fornecem funcionalidade básica do web2py e são acessíveis por meio de programação.
- **servidor web**: o servidor web Rocket WSGI.
- o aplicativo **admin**: usado para criar, projetar e gerenciar outros aplicativos web2py. O **admin** fornece um Ambiente de Desenvolvimento Integrado (IDE) completo baseado na Web para a criação de aplicativos web2py. Ele também inclui outras funcionalidades, como testes baseados na web e um shell baseado na web.
- o aplicativo **examples**: contém documentação e exemplos interativos. ** exemplos ** é um clone do site oficial web2py.com e inclui a documentação do epydoc.
- a aplicação **welcome**: o modelo básico de andaimes para qualquer outra aplicação. Por padrão, ele inclui um menu em cascata CSS puro e autenticação do usuário (discutido no Capítulo 9).

O web2py é distribuído no código-fonte e em formato binário para o Microsoft Windows e para o Mac OS X.

A distribuição do código-fonte pode ser usada em qualquer plataforma em que o Python seja executado e inclua os componentes mencionados acima.
Para executar o código fonte, você precisa do Python 2.7 pré-instalado no sistema. Você também precisa de um dos mecanismos de banco de dados suportados instalados.
Para aplicações de teste e demanda leve, você pode usar o banco de dados SQLite, incluído no Python 2.7.

As versões binárias do web2py (para Windows e Mac OS X) incluem um interpretador Python 2.7 e
o banco de dados SQLite. Tecnicamente, esses dois não são componentes do web2py. Incluílas nas distribuições binárias
permite que você execute o web2py sem precisar de nenhum outro recurso.

A imagem a seguir mostra a estrutura geral do web2py:
[[image @///image/en300.png center 480px]]


Na parte inferior, encontramos o intérprete. Subindo, encontramos o servidor web (foguete), as bibliotecas e os aplicativos. Cada aplicativo consiste em seu próprio design de MVC (modelos, controladores, visualizações, módulos, idiomas, bancos de dados e arquivos estáticos). Cada aplicativo inclui seu próprio código de administração de banco de dados (appadmin). Cada instância web2py é fornecida com três aplicativos: welcome (o aplicativo scaffolding), admin (o IDE baseado na web) e exemplos (cópia do website e exemplos).

### Sobre este livro

Este livro inclui os seguintes capítulos, além desta introdução:
- [[Capítulo 2 ../02]] é uma introdução minimalista ao Python. Assume o conhecimento de conceitos de programação procedural e orientados a objetos, como loops, condições, chamadas de função e classes, e aborda a sintaxe básica do Python. Ele também abrange exemplos de módulos do Python que são usados ​​em todo o livro. Se você já conhece o Python, pode pular o Capítulo 2.
- [[Capítulo 3 ../03]] mostra como iniciar o web2py, discute a interface administrativa e guia o leitor através de vários exemplos de complexidade crescente: um aplicativo que retorna uma string, um aplicativo de contador, um blog de imagem e um Um completo aplicativo wiki que permite uploads e comentários de imagens, fornece autenticação, autorização, serviços da Web e um feed RSS. Ao ler este capítulo, você pode precisar consultar o Capítulo 2 para obter uma sintaxe geral do Python e os capítulos a seguir para obter uma referência mais detalhada sobre as funções que são usadas.
- [[Capítulo 4 ../04]] abrange mais sistematicamente a estrutura principal e bibliotecas: mapeamento de URL, solicitação, resposta, sessões, armazenamento em cache, agendador, cron, internacionalização e fluxo de trabalho geral.
- [[Capítulo 5 ../05]] é uma referência para a linguagem de modelos usada para criar visualizações. Ele mostra como incorporar código Python em HTML e demonstra o uso de ajudantes (objetos que podem gerar HTML).
- [[Capítulo 6 ../06]] cobre a Camada de Abstração do Banco de Dados, ou DAL. A sintaxe do DAL é apresentada através de uma série de exemplos.
- [[Capítulo 7 ../07]] abrange formulários, validação de formulários e processamento de formulários. FORMULÁRIO é o ajudante de baixo nível para a construção de formulário. O SQLFORM é o construtor de formulários de alto nível. No Capítulo 7, também discutimos a API Create / Read / Update / Delete (CRUD).
- [[Capítulo 8 ../08]] abrange recursos de comunicação como recuperar e enviar e-mails e SMSes.
- [[Capítulo 9 ..]] abrange autenticação, autorização e o mecanismo extensível de controle de acesso baseado em função disponível no web2py. A configuração de correio e o CAPTCHA também são discutidos aqui, pois são usados ​​para autenticação. Na terceira edição do livro, adicionamos ampla cobertura de integração com mecanismos de autenticação de terceiros, como OpenID, OAuth, Google, Facebook, LinkedIn etc.
- [[Capítulo 10 ..10]] é sobre como criar serviços web no web2py. Oferecemos exemplos de integração com o Google Web Toolkit via pijamas e com o Adobe Flash via PyAMF.
- [[Capítulo 11 ..11]] é sobre receitas web2py e jQuery. O web2py é projetado principalmente para a programação do lado do servidor, mas inclui o jQuery, já que descobrimos que ele é a melhor biblioteca JavaScript de código aberto disponível para efeitos e Ajax. Neste capítulo, discutiremos como usar efetivamente o jQuery com o web2py.
- [[Capítulo 12 ..12]] discute componentes e plugins web2py como uma forma de construir aplicações modulares. Fornecemos um exemplo de um plug-in que implementa muitas funcionalidades comumente usadas, como gráficos, comentários e marcação.
- [[Capítulo 13 ../13]] é sobre a implantação de produção de aplicativos web2py. Discutimos especificamente a implantação em um servidor da Web LAMP (que consideramos a principal alternativa de implantação). Discutimos servidores web alternativos e configuração do banco de dados PostgreSQL. Discutimos a execução como um serviço em um ambiente Microsoft Windows e a implantação em algumas plataformas específicas, incluindo o Google Applications Engine, o Heroku e o PythonAnywhere. Neste capítulo, também discutimos questões de segurança e escalabilidade.
- [[Capítulo 14 ../14]] contém uma variedade de outras receitas para resolver tarefas específicas, incluindo atualizações, geocodificação, paginação, a API do Twitter e muito mais.
- [[Capítulo 15 ../15]] tem informações sobre como ajudar e contribuir com o projeto, com tópicos como fazer relatórios de bugs e contribuir com mudanças no código.

Este livro aborda apenas as funcionalidades básicas do web2py e a API que acompanha o web2py.
Este livro não abrange app web2py (por exemplo, aplicativos prontos).

Você pode baixar os dispositivos web2py do site correspondente ``appliances``:cite.

Você pode encontrar tópicos adicionais discutidos no grupo de usuários ``usergroup``:cite. Há também AlterEgo``alterego``:cite, o antigo blog web2py e FAQ.
``MARKMIN``:inxx
Este livro foi escrito usando a sintaxe MARKMIN (ver [[Capítulo 5 ../05#markmin_syntax]]) e convertido automaticamente para HTML, LaTeX e PDF.

### Support

The main support channel is the usergroup``usergroup``:cite, with dozens of posts every day. Even if you're a newbie, don't hesitate to ask - we'll be pleased to help you.
There is also a formal issue tracker system on https://github.com/web2py/web2py/issues . Last but not least, you can have professional support (see the web site for details).

### Contribute

Any help is really appreciated. You can help other users on the user group, or by directly submitting patches on the program (at the GitHub site https://github.com/web2py/web2py).
Even if you find a typo on this book, or have an improvement on it, the best way to help is by patching the book itself (which is under the source folder of the repository
at https://github.com/mdipierro/web2py-book).
For more information on contributing, please see [[Chapter 15 ..\15]].

[[web2py_style]]
### Elements of style

PEP8 ``style``:cite  contains good style practices when programming with Python. You will find
that web2py does not always follow these rules. This is not because of omissions or negligence; it is our
belief that the users of web2py should follow these rules and we encourage it. We chose not to
follow some of those rules when defining web2py helper objects in order to minimize the probability
of name conflict with objects defined by the user.

For example, the class that represents a ``<div>`` is called ``DIV``, while according to the
Python style reference it should have been called ``Div``. We believe that, for this specific example that
using an all-upper-case "DIV" is a more natural choice. Moreover, this approach leaves programmers
free to create a class called "Div" if they choose to do so.
Our syntax also maps naturally into the DOM notation of most browsers (including, for example, Firefox).

According to the Python style guide, all-upper-case strings should be used for constants and not
variables. Continuing with our example, even considering that ``DIV`` is a class,
it is a special class that should never be modified by
the user because doing so would break other web2py applications.
Hence, we believe this qualifies the ``DIV`` class as
something that should be treated as a constant, further justifying our choice of notation.

In summary, the following conventions are followed:
- HTML helpers and validators are all upper case for the reasons discussed above (for example ``DIV``, ``A``, ``FORM``, ``URL``).
- The translator object ``T`` is upper case despite the fact that it is an instance of a class and not a class itself. Logically the translator object performs an action similar to the HTML helpers, it affects rendering part of the presentation. Also, ``T`` needs to be easy to locate in the code and must have a short name.
- DAL classes follow the Python style guide (first letter capitalized), for example ``Table``, ``Field``, ``Query``, ``Row``, ``Rows``, etc.

In all other cases we believe we have followed, as much as possible,
the Python Style Guide (PEP8).
For example all instance objects are lower-case (request, response, session, cache), and all internal classes are capitalized.

In all the examples of this book, web2py keywords are shown in bold, while strings and comments are shown in italic.


### License
``license``:inxx

web2py is licensed under the LGPL version 3 License. The full text of the license is available in ref.``lgpl3``:cite.

In accordance with LGPL you may:

- redistribute web2py with your apps (including official web2py binary versions)
- release your applications which use official web2py libraries under any license you wish

Yet you must:

- make clear in the documentation that your application uses web2py
- release any modification of the web2py libraries under the LGPLv3 license

The license includes the usual disclaimer:

THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.
EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE PROGRAM “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
NECESSARY SERVICING, REPAIR OR CORRECTION.

IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT
HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE,
BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL
DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES
OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER
PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

**Earlier versions**

Earlier versions of web2py, 1.0.*-1.90.*, were released under the GPL2 license plus a
commercial exception which, for practical purposes, was very similar to the current LGPLv3.

**Third party software distributed with web2py**

web2py contains third party software under the gluon/contrib/ folder and various JavaScript and CSS files.
These files are distributed with web2py under their original licenses, as stated in the files.


### Acknowledgments

web2py was originally developed by and copyrighted by Massimo Di Pierro.
The first version (1.0) was released in October, 2007. Since then it has been adopted by many users, some of whom have also contributed bug reports, testing, debugging, patches, and proofreading of this book.

Some of the major developers and contributors are, in alphabetical order by first name:

Adam Bryzak,
Adam Gojdas,
Adrian Klaver,
Alain Boulch,
Alan Etkin,
Alec Taylor,
Alexandre Andrade,
Alexey Nezhdanov,
Alvaro Justen,
Anand Vaidya,
Anatoly Belyakov,
Ander Arbelaiz,
Anders Roos,
Andrew Replogle,
Andrew Willimott,
Angelo Compagnucci,
Angelo and Villas,
Annet Vermeer,
Anthony Bastardi,
Anton Muecki,
Antonio Ramos,
Arun Rajeevan,
Attila Csipa,
Ben Goosman,
Ben Reinhart,
Benjamin,
Bernd Rothert,
Bill Ferret,
Blomqvist,
Boris Manojlovic,
Branko Vukelic,
Brent Zeiben,
Brian Cottingham,
Brian Harrison,
Brian Meredyk,
Bruno Rocha,
CJ Lazell,
Caleb Hattingh,
Carlos Galindo,
Carlos Hanson,
Carsten Haese,
Cedric Meyer,
Charles Law,
Charles Winebrinner,
Chris Clark,
Chris May,
Chris Sanders,
Christian Foster Howes,
Christopher Smiga,
Christopher Steel,
Clavin Sim,
Cliff Kachinske,
Corne Dickens,
Craig Younkins,
Dan McGee,
Dan Ragubba,
Dane Wright,
Danny Morgan,
Daniel Gonz,
Daniel Haag,
Daniel Lin,
Dave Stoll,
David Adley,
David Harrison,
David Lin,
David Marko,
David Wagner,
Denes Lengyel,
Diaz Luis,
Dirk Krause,
Dominic Koenig,
Doug Warren,
Douglas Philips,
Douglas Soares de Andrade,
Douglas and Alan,
Dustin Bensing,
Elcio Ferreira,
Eric Vicenti,
Erwin Olario,
Falko Krause,
Farsheed Ashouri,
Felipe Meirelles,
Flavien Scheurer,
Fran Boon,
Francisco Gama,
Fred Yanowski,
Friedrich Weber,
Gabriele Alberti,
Gergely Kontra,
Gergely Peli,
Gerley Kontra,
Gilson Filho,
Glenn Caltech,
Graham Dumpleton,
Gregory Benjamin,
Gustavo Di Pietro,
Gyuris Szabolcs,
Hamdy Abdel-Badeea,
Hans C. v. Stockhausen,
Hans Donner,
Hans Murx,
Huaiyu Wang,
Ian Reinhart Geiser,
Iceberg,
Igor Gassko,
Igor Moskvitin,
Ismael Serratos,
Jan Beilicke,
Jay Kelkar,
Jeff Bauer,
Jesus Matrinez,
Jim Karsten,
Joachim Breitsprecher,
Joakim Eriksson,
Joe Barnhart,
Joel Carrier,
Joel Samuelsson,
John Heenan,
Jon Romero,
Jonas Rundberg,
Jonathan Benn,
Jonathan Lundell,
Jose Jachuf,
Joseph Piron,
Josh Goldfoot,
Josh Jaques,
Jose Vicente de Sousa,
Jurgis Pralgauskis,
Keith Yang,
Kenji Hosoda,
Kenneth Lundstr,
Kirill Spitsin,
Kyle Smith,
Larry Weinberg,
Limodou,
Loren McGinnis,
Louis DaPrato,
Luca De Alfaro,
Luca Zachetti,
Lucas D'Avila,
Madhukar R Pai,
Manuele Pesenti,
Marc Abramowitz,
Marcel Hellkamp,
Marcel Leuthi,
Marcello Della Longa,
Margaret Greaney,
Maria Mitica,
Mariano Reingart,
Marin Prajic,
Marin Pranji,
Marius van Niekerk,
Mark Kirkwood,
Mark Larsen,
Mark Moore,
Markus Gritsch,
Mart Senecal,
Martin Hufsky,
Martin Mulone,
Martin Weissenboeck,
Mateusz Banach,
Mathew Grabau,
Mathieu Clabaut,
Matt Doiron,
Matthew Norris,
Michael Fig,
Michael Herman,
Michael Howden,
Michael Jursa,
Michael Toomim,
Michael Willis,
Michele Comitini,
Miguel Goncalves,
Miguel Lopez,
Mike Amy,
Mike Dickun,
Mike Ellis,
Mike Pechkin,
Milan Melena,
Muhammet Aydin,
Napoleon Moreno,
Nathan Freeze,
Niall Sweeny,
Niccolo Polo,
Nick Groenke,
Nick Vargish,
Nico de Groot,
Nico Zanferrari,
Nicolas Bruxer,
Nik Klever,
Olaf Ferger,
Oliver Dain,
Olivier Roch Vilato,
Omi Chiba,
Ondrej Such,
Ont Rif,
Oscar Benjamin,
Osman Masood,
Ovidio Marinho Falcao Neto,
Pai,
Panos Jee,
Paolo Betti,
Paolo Caruccio,
Paolo Gasparello,
Paolo Valleri,
Patrick Breitenbach,
Pearu Peterson,
Peli Gergely,
Pete Hunt,
Peter Kirchner,
Phyo Arkar Lwin,
Pierre Thibault,
Pieter Muller,
Piotr Banasziewicz,
Ramjee Ganti,
Richard Gordon,
Richard Ree,
Robert Kooij,
Robert Valentak,
Roberto	Perdomo,
Robin Bhattacharyya,
Roman Bataev,
Ron McOuat,
Ross Peoples,
Ruijun Luo,
Running Calm,
Ryan Seto,
Salomon Derossi,
Sam Sheftel,
Scott Roberts,
Sebastian Ortiz,
Sergey Podlesnyi,
Sharriff Aina,
Simone Bizzotto,
Sriram Durbha,
Sterling Hankins,
Stuart Rackham,
Telman Yusupov,
Terrence Brannon,
Thadeus Burgess,
Thomas Dallagnese,
Tim Farrell,
Tim Michelsen,
Tim Richardson,
Timothy Farrell,
Tito Garrido,
Tyrone Hattingh,
Vasile Ermicioi,
Vidul Nikolaev Petrov,
Vidul Petrov,
Vinicius Assef,
Vladimir Donnikov,
Vladyslav Kozlovsky,
Vladyslav Kozlovskyy,
Wang Huaiyu,
Wen Gong,
Wes James,
Will Stevens,
Yair Eshel,
Yarko Tymciurak,
Yoshiyuki Nakamura,
Younghyun Jo,
Zahariash.

I am sure I forgot somebody, so I apologize.

I particularly thank Anthony, Simone, Richard, Jonathan, Mariano, Bruno, Vladyslav, Martin, Nathan, Thadeus, Tim, Iceberg, Denes, Hans, Christian, Fran and Patrick for their major contributions to web2py and Anthony, Alvaro, Brian, Bruno, Denes, Dane Denny, Erwin, Felipe, Graham, Jonathan, Hans, Kyle, Mark, Margaret, Michele, Nico, Richard, Roberto, Robin, Roman, Scott, Shane, Sharriff, Sriram, Sterling, Stuart, Thadeus, Wen (and others) for proofreading various versions of this book. Their contribution was invaluable. If you find any errors in this book, they are exclusively my fault, probably introduced by a last-minute edit. I also thank Ryan Steffen of Wiley Custom Learning Solutions for help with publishing the first edition of this book.

web2py contains code from the following authors, whom I would like to thank:

Guido van Rossum for Python``python``:cite, Peter Hunt, Richard Gordon, Timothy Farrell for the Rocket``rocket``:cite  web server, Christopher Dolivet for EditArea``editarea``:cite, Bob Ippolito for simplejson``simplejson``:cite, Simon Cusack and Grant Edwards for pyRTF``pyrtf``:cite, Dalke Scientific Software for pyRSS2Gen``pyrss2gen``:cite, Mark Pilgrim for feedparser``feedparser``:cite, Trent Mick for markdown2``markdown2``:cite, Allan Saddi for fcgi.py, Evan Martin for the Python memcache module``memcache``:cite, John Resig for jQuery``jquery``:cite.

I thank Helmut Epp (provost of DePaul University), David Miller (Dean of the College of Computing and Digital Media of DePaul University), and Estia Eichten (Member of MetaCryption LLC), for their continuous trust and support.

Finally, I wish to thank my wife, Claudia, and my son, Marco, for putting up with me during the many hours I have spent developing web2py, exchanging emails with users and collaborators, and writing this book. This book is dedicated to them.

